package kodlama.io.Devs.business.concretes;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import kodlama.io.Devs.business.abstracts.SubTechnologyService;
import kodlama.io.Devs.business.requests.subTechnology.CreateSubTechnologyRequest;
import kodlama.io.Devs.business.requests.subTechnology.DeleteSubTechnologyRequest;
import kodlama.io.Devs.business.requests.subTechnology.UpdateSubTechnologyRequest;
import kodlama.io.Devs.business.responses.subTechnology.GetAllSubTechnologiesResponse;
import kodlama.io.Devs.dataAccess.abstracts.LanguageRepository;
import kodlama.io.Devs.dataAccess.abstracts.SubTechnologyRepository;
import kodlama.io.Devs.entities.concretes.Language;
import kodlama.io.Devs.entities.concretes.SubTechnology;
@Service
public class SubTechnologyManager implements SubTechnologyService{
	
	private SubTechnologyRepository subTechnologyRepository;
	private LanguageRepository languageRepository;
	
	@Autowired
	public SubTechnologyManager(SubTechnologyRepository subTechnologyRepository,LanguageRepository languageRepository) {
		this.subTechnologyRepository=subTechnologyRepository;
		this.languageRepository=languageRepository;
	}

	@Override
	public List<GetAllSubTechnologiesResponse> getAll(){
		
		List<SubTechnology> subTechnologies = subTechnologyRepository.findAll();
		List<GetAllSubTechnologiesResponse> subTechnologiesResponses=new ArrayList<GetAllSubTechnologiesResponse>();
		
		for(SubTechnology subTechnology : subTechnologies) {
			GetAllSubTechnologiesResponse responseItem = new GetAllSubTechnologiesResponse();
			responseItem.setSubTechnologyName(subTechnology.getSubTechnologyName());
			subTechnologiesResponses.add(responseItem);
			
		}
		return subTechnologiesResponses;
	}
	
	@Override
	public void add(CreateSubTechnologyRequest createSubTechnologyRequest) {
		SubTechnology subTechnology = new SubTechnology();
		Language language = languageRepository.findById(createSubTechnologyRequest.getLanguageId()).get();
		subTechnology.setSubTechnologyName(createSubTechnologyRequest.getSubTechnologyName());
		subTechnology.setLanguage(language);
		subTechnologyRepository.save(subTechnology);
	}

	@Override
	public void update(UpdateSubTechnologyRequest updateSubTechnologyRequest, int id) {
		
		SubTechnology subTechnology = subTechnologyRepository.findById(id).get();
		Language programmingLanguage = languageRepository.findById(updateSubTechnologyRequest.getLanguageId()).get();
		subTechnology.setSubTechnologyName(updateSubTechnologyRequest.getSubTechnologyName());
		subTechnology.setLanguage(programmingLanguage);
		subTechnologyRepository.save(subTechnology);
		
	}

	@Override
	public void delete(DeleteSubTechnologyRequest deleteSubTechnologyRequest, int id) {
		
		subTechnologyRepository.deleteById(deleteSubTechnologyRequest.getSubTechnologyId());

	
		
	}
	

	
	
	
}
